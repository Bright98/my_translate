{"version":3,"sources":["components/header/header.tsx","components/expandedButton/expandedButton.tsx","components/wordCard/wordCard.tsx","services/config.ts","components/leitnerWordCard/leitnerWordCard.tsx","pages/translate/translate.tsx","pages/leitner/leitner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","actionClick","leadingClick","title","action","leading","className","btnClick","icon","expanded","expandedText","ExpandedButton","onClick","WordCard","text","BASE_URL","LeitnerWordCard","qs","require","React","useState","word","sayWord","start","getStart","words","getWords","index","setIndex","now","getNow","time","getTime","alertMessage","showAlertMessage","globalCycle","tomorrow","useEffect","setTimeout","clearTimeout","get_start","a","_now","Date","axios","post","stringify","time_stamp","res","Object","keys","data","length","remember","cycle","status","soso_remember","not_remember","TranslatePage","state","alert","alert_message","translate","this","setState","wordChange","e","target","value","translateClick","addToLeitner","response","props","history","push","onChange","autoFocus","Component","withRouter","LeitnerPage","goBack","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6384d29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Archive, ChevronRight } from 'react-feather';\r\nimport { ExpandedButton } from '..';\r\n\r\ninterface headerProps {\r\n    title?: string,\r\n    actionClick?: any,\r\n    leadingClick?: any,\r\n    action?: boolean,\r\n    leading?: boolean,\r\n}\r\n\r\nconst Header: React.FC<headerProps> = ({\r\n    actionClick,\r\n    leadingClick,\r\n    title,\r\n    action = true,\r\n    leading = true,\r\n}) => {\r\n    return (\r\n        <div className='header'>\r\n            <div className='header__titleLeading'>\r\n                {leading &&\r\n                    <ExpandedButton\r\n                        btnClick={leadingClick}\r\n                        icon={<ChevronRight />}\r\n                        className='header__leading'\r\n                        expanded={false}\r\n                    />\r\n                }\r\n                <h4>{title}</h4>\r\n            </div>\r\n            {action &&\r\n                <ExpandedButton\r\n                    icon={<Archive />}\r\n                    expandedText=\"جعبه لایتنر\"\r\n                    btnClick={actionClick}\r\n                    className='header__actions'\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ninterface expandedBtnProps {\r\n    expandedText?: string,\r\n    icon: React.ReactNode,\r\n    btnClick?: any,\r\n    className?: string,\r\n    expanded?: boolean,\r\n}\r\n\r\nconst ExpandedButton: React.FC<expandedBtnProps> = ({\r\n    expandedText,\r\n    className,\r\n    expanded = true,\r\n    btnClick,\r\n    icon,\r\n}) => {\r\n    return (\r\n        <div className={'expandedButton ' + className} onClick={btnClick}>\r\n            {expanded && <span>{expandedText}</span>}\r\n            {icon}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpandedButton;","import React from 'react';\r\n\r\ninterface wordCardProps {\r\n    text?: string,\r\n}\r\n\r\nconst WordCard: React.FC<wordCardProps> = ({ text }) => {\r\n    return (\r\n        <div className='wordCard'>\r\n            <h5>{text}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordCard;","export const BASE_URL = 'http://127.0.0.1:5005';","import React from 'react';\r\nimport { Frown, Meh, Smile, Check, Play } from 'react-feather';\r\nimport { ExpandedButton, WordCard } from '..';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../../services/config';\r\n\r\nconst LeitnerWordCard: React.FC = () => {\r\n    const qs = require(\"query-string\");\r\n\r\n    const [word, sayWord] = React.useState(false);\r\n    const [start, getStart] = React.useState(false);\r\n    const [words, getWords] = React.useState([]);\r\n    const [index, setIndex] = React.useState(0);\r\n    const [now, getNow] = React.useState(0);\r\n    const [time, getTime] = React.useState(5);\r\n    const [alertMessage, showAlertMessage] = React.useState('');\r\n    const globalCycle = [1, 3, 7, 21, 40];\r\n    var tomorrow = now + 24 * 60 * 60 * 1000;\r\n\r\n    React.useEffect(() => {\r\n        setTimeout(() => {\r\n            if (time > 0) {\r\n                getTime(time - 1);\r\n            }\r\n        }, 1000);\r\n        if (time === 0) {\r\n            showAlertMessage('');\r\n            getTime(5);\r\n        }\r\n        return () => clearTimeout(time);\r\n    }, [time])\r\n\r\n\r\n    const get_start = async () => {\r\n        var _now = Date.now()\r\n        getNow(_now);\r\n\r\n        var res = await axios.post(\r\n            `${BASE_URL}/show_words/`,\r\n            qs.stringify({ time_stamp: _now }),\r\n        );\r\n\r\n        if (Object.keys(res.data).length !== 0) {\r\n            getWords(res.data);\r\n            getStart(true);\r\n        }\r\n        else {\r\n            showAlertMessage('کلمه ای برای امروز وجود نداره :)');\r\n        }\r\n    }\r\n\r\n    const remember = async () => {\r\n        var res = await axios.post(\r\n            `${BASE_URL}/remember_word/`,\r\n            qs.stringify({\r\n                word: words[index][\"word\"],\r\n                cycle: words[index][\"cycle\"] + 1,\r\n                time_stamp: now + globalCycle[words[index][\"cycle\"] + 1] * tomorrow\r\n            }),\r\n        );\r\n        if (res.status === 200) {\r\n            sayWord(false);\r\n            if (index < words.length - 1) {\r\n                setIndex(index + 1)\r\n            }\r\n            else {\r\n                getWords([]);\r\n                sayWord(false);\r\n                getStart(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const soso_remember = async () => {\r\n        var res = await axios.post(\r\n            `${BASE_URL}/remember_word/`,\r\n            qs.stringify({\r\n                word: words[index][\"word\"],\r\n                cycle: words[index][\"cycle\"],\r\n                time_stamp: now + tomorrow\r\n            }),\r\n        );\r\n        if (res.status === 200) {\r\n            sayWord(false);\r\n            if (index < words.length - 1) {\r\n                setIndex(index + 1)\r\n            }\r\n            else {\r\n                getWords([]);\r\n                sayWord(false);\r\n                getStart(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const not_remember = async () => {\r\n        var res = await axios.post(\r\n            `${BASE_URL}/remember_word/`,\r\n            qs.stringify({\r\n                word: words[index][\"word\"],\r\n                cycle: 1,\r\n                time_stamp: now + tomorrow\r\n            }),\r\n        );\r\n        if (res.status === 200) {\r\n            sayWord(false);\r\n            if (index < words.length - 1) {\r\n                setIndex(index + 1)\r\n            }\r\n            else {\r\n                getWords([]);\r\n                sayWord(false);\r\n                getStart(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {alertMessage ?\r\n                <div className='translate__alert'>{alertMessage}</div> :\r\n                <></>\r\n            }\r\n            <div className='container leitnerWordCard'>\r\n                <div className='col-sm-10 col-md-7'>\r\n                    {(words.length && start) ?\r\n                        <>\r\n                            <WordCard text={word ? words[index][\"translate\"] : words[index][\"word\"]} />\r\n                            {word ?\r\n                                <div className='leitnerWordCard__moods'>\r\n                                    <ExpandedButton\r\n                                        icon={<Smile />}\r\n                                        expandedText='بلد بودم'\r\n                                        className='leitnerWordCard__moods__mood'\r\n                                        btnClick={remember}\r\n                                    />\r\n                                    <ExpandedButton\r\n                                        icon={<Meh />}\r\n                                        expandedText='یکم گیر داشتم'\r\n                                        className='leitnerWordCard__moods__mood'\r\n                                        btnClick={soso_remember}\r\n                                    />\r\n                                    <ExpandedButton\r\n                                        icon={<Frown />}\r\n                                        expandedText='بلد نبودم'\r\n                                        className='leitnerWordCard__moods__mood'\r\n                                        btnClick={not_remember}\r\n                                    />\r\n                                </div> :\r\n                                <div className='leitnerWordCard__sayBtn'>\r\n                                    <ExpandedButton\r\n                                        icon={<Check />}\r\n                                        expandedText='گفتم'\r\n                                        className='leitnerWordCard__moods__mood'\r\n                                        btnClick={() => sayWord(true)}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </> :\r\n                        <div>\r\n                            <ExpandedButton\r\n                                icon={<Play />}\r\n                                expandedText='شروع'\r\n                                className='leitnerWordCard__start'\r\n                                btnClick={get_start}\r\n                            />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default LeitnerWordCard;","import React from 'react';\r\nimport { Plus, Search } from 'react-feather';\r\nimport { ExpandedButton, Header } from '../../components';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../../services/config';\r\n\r\n\r\ntype Props = RouteComponentProps;\r\n\r\n\r\nclass TranslatePage extends React.Component<Props> {\r\n    state = {\r\n        alert: false,\r\n        alert_message: '',\r\n        time: 4,\r\n        translate: '',\r\n        word: '',\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.alert) {\r\n            setTimeout(() => {\r\n                if (this.state.time > 0) {\r\n                    this.setState({\r\n                        time: this.state.time - 1,\r\n                    })\r\n                }\r\n            }, 1000);\r\n            if (this.state.time === 0)\r\n                this.setState({\r\n                    alert: false,\r\n                    time: 4,\r\n                });\r\n            return () => clearTimeout(this.state.time);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const qs = require(\"query-string\");\r\n\r\n        const wordChange = async (e: any) => {\r\n            this.setState({\r\n                word: e.target.value,\r\n            })\r\n        };\r\n\r\n\r\n        const translateClick = async () => {\r\n            if (this.state.word) {\r\n                var res = await axios.post(\r\n                    `${BASE_URL}/translate/`,\r\n                    qs.stringify({ word: this.state.word }),\r\n                );\r\n                this.setState({\r\n                    translate: res.data,\r\n                })\r\n            }\r\n        }\r\n\r\n        const addToLeitner = async () => {\r\n\r\n            if (this.state.word && this.state.translate) {\r\n                try {\r\n                    var res = await axios.post(\r\n                        `${BASE_URL}/add_to_leitner/`,\r\n                        qs.stringify({\r\n                            word: this.state.word,\r\n                            translate: this.state.translate,\r\n                            cycle: 1,\r\n                            time_stamp: Date.now(),\r\n                        }),\r\n                    );\r\n                    if (res.status === 201)\r\n                        this.setState({\r\n                            alert: true,\r\n                            alert_message: 'کلمه به لایتنر اضافه شد ... :)'\r\n                        })\r\n                } catch (error) {\r\n                    if (error.response.status === 400)\r\n                        this.setState({\r\n                            alert: true,\r\n                            alert_message: 'این کلمه در لایتنر وجود داره !'\r\n                        })\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className='translate__layout'>\r\n                <Header\r\n                    leading={false}\r\n                    title='سرویس ترجمه'\r\n                    actionClick={() => this.props.history.push('/leitner')} />\r\n                {this.state.alert ?\r\n                    <div className='translate__alert'>{this.state.alert_message}</div> :\r\n                    <></>\r\n                }\r\n                <div className='translate__layout__container'>\r\n                    <div className='translate'>\r\n                        <div className='translate__box'>\r\n                            <div className='translate__box__translateTitle'>\r\n                                <span className='translate__box__title'>ترجمه</span>\r\n                                <span className='translate__box__lang'>\r\n                                    (فارسی)\r\n                                </span>\r\n                            </div>\r\n                            <div className='translate__box__translateBox'>{this.state.translate}</div>\r\n                        </div>\r\n                        <div className='translate__box'>\r\n                            <div className='translate__box__wordTitle'>\r\n                                <span className='translate__box__title'>کلمه</span>\r\n                                <span className='translate__box__lang'>\r\n                                    (انگلیسی)\r\n                                </span>\r\n                            </div>\r\n                            <textarea onChange={wordChange} autoFocus />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='translate__btn'>\r\n                        <ExpandedButton\r\n                            icon={<Search />}\r\n                            btnClick={translateClick}\r\n                            expandedText='ترجمه'\r\n                            className='translate__btn__translate'\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <ExpandedButton\r\n                    icon={<Plus />}\r\n                    expandedText='افزودن به جعبه لایتنر'\r\n                    className='translate__addBtn'\r\n                    btnClick={addToLeitner}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(TranslatePage);","import React from 'react';\r\nimport { Header, LeitnerWordCard } from '../../components';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\ntype Props = RouteComponentProps;\r\n\r\nclass LeitnerPage extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className='leitner__layout'>\r\n                <Header\r\n                    title='جعبه لایتنر'\r\n                    action={false}\r\n                    leading={true}\r\n                    leadingClick={() => this.props.history.goBack()}\r\n                />\r\n                <LeitnerWordCard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LeitnerPage);","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport './App.scss';\r\nimport { TranslatePage, LeitnerPage } from './pages';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={TranslatePage} />\r\n          <Route exact path=\"/leitner\" component={LeitnerPage} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}